<?phpclass DataBase{	private $config;	private $pdo;	public function __construct($config){		$this->config = $config;		//подключение к БД		try{  			$this->pdo = new PDO("mysql:host=".$this->config->db['hostname'].";dbname=".$this->config->db['database']."", $this->config->db['username'], $this->config->db['password']);  			$this->pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);		}catch(PDOException $e){  			echo "Хьюстон, у нас проблемы.";  			file_put_contents('PDOErrors.txt', $e->getMessage(), FILE_APPEND);exit();}		//переводим кодировку		$this->pdo->exec("SET NAMES ".$this->config->db['dbcollat']);	}		//Выполнить запрос	private function queryPDO($query,$return=true){		$query = str_replace( array("`","--"), array("&#34;","&#8212;"),$query);		$STH = $this->pdo->query($query); 		if($return){			$STH->execute();			while($db_page[] = $STH->fetch(PDO::FETCH_ASSOC)){} 			unset($db_page[count($db_page)-1]);			return $db_page;		}else{			if($STH) return true; else return false;		}	}		//Выборка элемента из нескольких таблиц	private function getSelectArr($table_name, $fields, $where, $order, $limit, $count){		if($where=='' or $fields=='') return false;		//подстановка префикса		for($i=0;isset($table_name[$i]);$i++){			$table_name_1[$i] = $this->config->db['prefix'].$table_name[$i].'.';			$table_name[$i] = $table_name[$i].'.';}		//замена имен таблиц		$where = (is_array($where))?" WHERE ".str_replace( $table_name, $table_name_1, implode(" AND ", $where)):" WHERE ".str_replace( $table_name, $table_name_1, $where);		//подбор остальных параметров		//if(is_array($fields)) $fields = implode(",", $fields);		$fields = (is_array($fields))?str_replace( $table_name, $table_name_1, implode(" , ", $fields)):str_replace( $table_name, $table_name_1, $fields);				if ($order!='') $order = "ORDER BY ".str_replace( $table_name, $table_name_1, $order);		if ($limit!='') $limit = "LIMIT $limit";		//подготовка переменной с таблицами		for($i=0;isset($table_name[$i]);$i++)$table_name[$i] = substr($table_name_1[$i],0,-1);		$table_name = implode(",", $table_name);		$zapros = ($count)? "SELECT $fields, ( SELECT COUNT($count) FROM $table_name $where) as allCount FROM $table_name $where $order $limit" : "SELECT $fields FROM $table_name $where $order $limit";		//return print_r($zapros,true);		return $this->queryPDO($zapros);	}		//Выборка элемента из одной таблицы	private function getSelectSrt($table_name, $fields, $where, $order, $limit, $count){		if(is_array($fields)) $fields = implode(",", $fields);		$table_name = $this->config->db['prefix'].$table_name;		if(is_array($where))$where = implode(" AND ", $where);		if($where!='') $where = " WHERE $where ";		if ($order!='') $order = "ORDER BY $order";		if ($limit!='') $limit = "LIMIT $limit";						$zapros = ($count)? "SELECT $fields, ( SELECT COUNT($count) FROM $table_name $where) as allCount FROM $table_name $where $order $limit" : "SELECT $fields FROM $table_name $where $order $limit";		return $this->queryPDO($zapros);	}		public function select($table_name='', $fields='', $where='', $order='', $limit='', $count=false){		if($table_name=='' or $fields=='') return false;		if( is_array($table_name) )			return $this->getSelectArr($table_name, $fields, $where, $order, $limit, $count);		else			return $this->getSelectSrt($table_name, $fields, $where, $order, $limit, $count);	}		public function update($table_name='', $set=false, $where=false){		$set = (is_array($set))?' SET '.implode(", ", $set): ((!$set)? false:' SET '.$set);		if(!$set) return false;		$where = (is_array($where))?' WHERE '.implode(" AND ", $where): ((!$where)?false:' WHERE '.$where);		$table_name = $this->config->db['prefix'].$table_name;				return $this->queryPDO("UPDATE $table_name $set $where",false);	}	public function delete($table_name='', $where=false){		if(!$where = (is_array($where))?' WHERE '.implode(" AND ", $where): ((!$where)?false:' WHERE '.$where))			return false;		$table_name = $this->config->db['prefix'].$table_name;		return $this->queryPDO("DELETE FROM $table_name $where",false);	}	public function sql($sql=false, $return=false, $proverka=false){		if(!$proverka or !$sql) return false;		return $this->queryPDO($sql,$return);	}	public function insert($table_name='', $where=false, $set=false){		$query = '';		if(is_array($where)){ 			foreach ($where as $value) $query .= "$value,"; $where = substr($query, 0, -1); 		}else $where = (isset($where))?$where:false;				$query = '';$query2 = '';		if(is_array($set[0])){			foreach ($set as $value){				foreach ($value as $val) $query .= ($val==='NULL')?"NULL,":(($val===0)?"'0',":"'".addslashes($val)."',");				$query = substr($query, 0, -1);				$query2 .= "($query),";			}			$set = substr($query2, 0, -1); 		}else{			if(is_array($set)){				foreach ($set as $val) $query .= ($val==='NULL')?"NULL,":(($val===0)?"'0',":"'".addslashes($val)."',");				$query = substr($query, 0, -1); 				$set = "($query)";			}else $set = (isset($set))?$set:false;		}				$table_name = $this->config->db['prefix'].$table_name;		if(!$where or !$set) return false;				return $this->queryPDO("INSERT IGNORE INTO $table_name($where) VALUES $set",false);	}		public function convertRusEn($str) {		$str = (string) $str; // преобразуем в строковое значение		$str = strip_tags($str); // убираем HTML-теги		$str = str_replace(array("\n", "\r"), " ", $str); // убираем перевод каретки		$str = preg_replace("/\s+/", ' ', $str); // удаляем повторяющие пробелы		$str = trim($str); // убираем пробелы в начале и конце строки		$str = function_exists('mb_strtolower')?mb_strtolower($str, 'UTF-8'):strtolower($str); // переводим строку в нижний регистр (иногда надо задать локаль)		$rus = array(	'ё','й','ц','у','к','е','н','г','ш','щ','з','х','ъ',						'ф','ы','в','а','п','р','о','л','д','ж','э',						'я','ч','с','м','и','т','ь','б','ю',' ');		$lat = array(	'yo','i','tc','u','k','e','n','g','sh','sh','z','h','',						'f','i','v','a','p','r','o','l','d','zh','e',						'ya','ch','s','m','i','t','','b','yu','_');		$str = str_replace($rus,$lat,$str);		return preg_replace("/[^0-9a-z-_]/i", "", $str); // очищаем строку от недопустимых символов		return $str;	}	public function convertReservZnak($str) {		$char=array('`'=>'&apos;','\''=>'&apos;','/'=>'&#47;',					'\\'=>'&#92;','"'=>'&quot;','<'=>'&lt;', '>'=>'&gt;',					'ˆ'=>'&circ;','~'=>'&tilde;'); 		return strtr($str,$char);	}	public function getAutoIncrement($table) {		$table = $this->config->db['prefix'].$table;		$var = $this->queryPDO("SELECT AUTO_INCREMENT FROM information_schema.tables WHERE table_name='$table'");		return $var[0]['AUTO_INCREMENT'];	}		// ЗАКОН ***********************************************************	public function zak_select($query,$val,$fetch=false){		foreach($val as $k=>$v){			if(is_array($v)){				$arr = '';				foreach($v as $value=>$text) $arr[$k.'_'.$value] = $text;				unset($val[$k]);				$query = str_replace('='.$k,' IN('.join(',',array_flip($arr)).')',$query);				foreach($arr as $vv => $zz) $val[$vv] = $zz;			}		}		$stmt = $this->pdo->prepare($query);		$stmt->execute($val);		if(!$stmt) return false;		if($fetch==false){			while ($row = $stmt->fetch(PDO::FETCH_ASSOC))				$data = $row;		}else{			$i=0;			while ($row = $stmt->fetch(PDO::FETCH_ASSOC)){				$data[$i] = $row;				$i++;			}		}		return $data;	}	public function zak_insert($query,$val){		$stmt = $this->pdo->prepare($query);		$stmt->execute($val);		return $this->pdo->lastInsertId();	}	public function zak_update($query,$val=false){		if(!$val){			$stmt = $this->pdo->query($query);			$stmt->execute(); 		}else{			$stmt = $this->pdo->prepare($query);			$stmt->execute($val);		}		return $stmt->rowCount();	}	public function zak_delete($query,$val=false){		if(!$val){			$stmt = $this->pdo->query($query);			$stmt->execute(); 		}else{			$stmt = $this->pdo->prepare($query);			$stmt->execute($val);		}		return $stmt->rowCount();	}	public function zak_query($query,$val=false){		if(!$val){			$stmt = $this->pdo->query($query);			$stmt->execute(); 		}else{			$stmt = $this->pdo->prepare($query);			$stmt->execute($val);		}		while($db_page[] = $stmt->fetch(PDO::FETCH_ASSOC)){} 		unset($db_page[count($db_page)-1]);		return $db_page;	}	// end ЗАКОН ***********************************************************		//Закрытие соединения	public function __destruct(){		if($this->pdo) $this->pdo = null;	}}?>